{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst GOOGLE_BOOKS_API = 'https://www.googleapis.com/books/v1/volumes';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the token in all requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Auth-related API calls\nexport const register = async userData => {\n  try {\n    console.log(\"userData--------\", userData);\n    const response = await api.post('/auth/register', userData);\n    console.log(\"response-----\", response);\n    return response.data;\n  } catch (error) {\n    console.error('Error registering user:', error);\n    throw error;\n  }\n};\nexport const login = async (email, password) => {\n  try {\n    console.log(\"login------\", email, password);\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    console.log(\"response--------\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error logging in:', error);\n    throw error;\n  }\n};\n\n// Friend-related API calls\nexport const sendFriendRequest = async (receiverId, senderId) => {\n  try {\n    const response = await api.post('/auth/friends/send', {\n      receiverId,\n      senderId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending friend request:', error);\n    throw error;\n  }\n};\nexport const fetchFriendRequests = async () => {\n  try {\n    const response = await api.get('/auth/friends/requests');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching friend requests:', error);\n    throw error;\n  }\n};\nexport const respondToFriendRequest = async (senderId, requestId, action) => {\n  try {\n    const endpoint = action === 'accept' ? '/auth/friends/accept' : '/auth/friends/decline';\n    const response = await api.post(endpoint, {\n      senderId,\n      requestId,\n      action\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error responding to friend request:', error);\n    throw error;\n  }\n};\nexport const fetchFriends = async () => {\n  try {\n    const response = await api.get('/auth/friends');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching friends:', error);\n    throw error;\n  }\n};\nexport const searchUsers = async username => {\n  try {\n    const response = await api.get(`/auth/search?username=${encodeURIComponent(username)}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error searching users:', error);\n    throw error;\n  }\n};\nexport const getFriendDetails = async friendId => {\n  try {\n    const response = await api.get(`/auth/friends/details/${friendId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching friend details:', error);\n    throw error;\n  }\n};\n\n// Comment-related API calls\nexport const postComment = async commentData => {\n  try {\n    const response = await api.post(`/auth/friends/comment`, commentData);\n    return response.data.comments;\n  } catch (error) {\n    console.error('Error posting comment:', error);\n    throw error;\n  }\n};\nexport const getDetails = async userId => {\n  try {\n    const response = await api.get(`/auth/profile/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user details:', error);\n    throw error;\n  }\n};\nexport const deleteComment = async commentId => {\n  try {\n    const response = await api.delete(`/auth/friends/delete-comment/${commentId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting comment:', error);\n    throw error;\n  }\n};\n\n// Message-related API calls\nexport const fetchMessages = async friendId => {\n  try {\n    const response = await api.get(`/auth/friends/messages/${friendId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching messages:', error);\n    throw error;\n  }\n};\nexport const sendMessage = async messageData => {\n  try {\n    const response = await api.post(`/auth/friends/messages`, messageData);\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\n\n// Book-related API calls\nexport const createBook = async bookData => {\n  try {\n    const response = await api.post(`/books`, bookData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating book:', error);\n    throw error;\n  }\n};\nexport const updateBook = async (id, bookData) => {\n  try {\n    const response = await api.put(`/books/${id}`, bookData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating book:', error);\n    throw error;\n  }\n};\nexport const getBook = async id => {\n  try {\n    const response = await api.get(`/books/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching book:', error);\n    throw error;\n  }\n};\nexport const getBookWithStatus = async id => {\n  try {\n    const response = await api.get(`/books/${id}/status`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching book with status:', error);\n    throw error;\n  }\n};\n\n// MyBook-related API calls\nexport const getMyBooks = async userId => {\n  try {\n    const response = await api.get(`/mybooks?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching my books:', error);\n    throw error;\n  }\n};\nexport const deleteBook = async id => {\n  try {\n    const response = await api.delete(`/mybooks/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting book:', error);\n    throw error;\n  }\n};\nexport const addBookFromSearch = async bookData => {\n  try {\n    const response = await api.post(`/mybooks/add-from-search`, bookData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding book from search:', error);\n    throw error;\n  }\n};\nexport const rateBook = async (id, ratingData) => {\n  try {\n    const response = await api.post(`/mybooks/${id}/rate`, ratingData);\n    return response.data;\n  } catch (error) {\n    console.error('Error rating book:', error);\n    throw error;\n  }\n};\nexport const updateBookProgress = async progressData => {\n  try {\n    const response = await api.put(`/mybooks/progress`, progressData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating book progress:', error);\n    throw error;\n  }\n};\nexport const updateBookStatus = async (id, statusData) => {\n  try {\n    const response = await api.put(`/mybooks/update-status/${id}`, statusData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating book status:', error);\n    throw error;\n  }\n};\nexport const getCurrentlyReadingBooks = async userId => {\n  try {\n    console.log(\"userId----------\", userId);\n    const response = await api.get(`/mybooks/dashboard?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching currently reading books:', error);\n    throw error;\n  }\n};\nexport const getBookDetails = async bookId => {\n  try {\n    const response = await api.get(`/books/${bookId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching book details:', error);\n    throw error;\n  }\n};\nexport const addReview = async (bookId, reviewData) => {\n  try {\n    const response = await api.post(`/mybooks/review/${bookId}`, reviewData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding review:', error);\n    throw error;\n  }\n};\nexport const editReview = async (bookId, reviewData) => {\n  try {\n    const response = await api.put(`/mybooks/review/${bookId}`, reviewData);\n    return response.data;\n  } catch (error) {\n    console.error('Error editing review:', error);\n    throw error;\n  }\n};\nexport const deleteReview = async reviewId => {\n  try {\n    const response = await api.delete(`/mybooks/review/${reviewId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting review:', error);\n    throw error;\n  }\n};\nexport const searchBooks = async query => {\n  try {\n    const response = await api.get(`/search-books?q=${encodeURIComponent(query)}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error searching books:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","GOOGLE_BOOKS_API","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","register","userData","console","log","response","post","data","login","email","password","sendFriendRequest","receiverId","senderId","fetchFriendRequests","get","respondToFriendRequest","requestId","action","endpoint","fetchFriends","searchUsers","username","encodeURIComponent","getFriendDetails","friendId","postComment","commentData","comments","getDetails","userId","deleteComment","commentId","delete","fetchMessages","sendMessage","messageData","createBook","bookData","updateBook","id","put","getBook","getBookWithStatus","getMyBooks","deleteBook","addBookFromSearch","rateBook","ratingData","updateBookProgress","progressData","updateBookStatus","statusData","getCurrentlyReadingBooks","getBookDetails","bookId","addReview","reviewData","editReview","deleteReview","reviewId","searchBooks","query"],"sources":["/home/manasa/Projects/UpGrad/Capestone Project/bookshelf-app/bookShelf/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\nconst GOOGLE_BOOKS_API = 'https://www.googleapis.com/books/v1/volumes';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include the token in all requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['x-auth-token'] = token;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Auth-related API calls\nexport const register = async (userData) => {\n  try {\n    console.log(\"userData--------\", userData);\n    \n    const response = await api.post('/auth/register', userData);\n    console.log(\"response-----\", response);\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error registering user:', error);\n    throw error;\n  }\n};\n\nexport const login = async (email, password) => {\n  try {\n    console.log(\"login------\", email, password);\n    \n    const response = await api.post('/auth/login', {email, password});\n    console.log(\"response--------\", response.data);\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error logging in:', error);\n    throw error;\n  }\n};\n\n// Friend-related API calls\nexport const sendFriendRequest = async (receiverId, senderId) => {\n  try {\n    const response = await api.post('/auth/friends/send', { receiverId, senderId });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending friend request:', error);\n    throw error;\n  }\n};\n\nexport const fetchFriendRequests = async () => {\n  try {\n    const response = await api.get('/auth/friends/requests');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching friend requests:', error);\n    throw error;\n  }\n};\n\nexport const respondToFriendRequest = async (senderId, requestId, action) => {\n  try {\n    const endpoint = action === 'accept' ? '/auth/friends/accept' : '/auth/friends/decline';\n    const response = await api.post(endpoint, { senderId, requestId, action });\n    return response.data;\n  } catch (error) {\n    console.error('Error responding to friend request:', error);\n    throw error;\n  }\n};\n\nexport const fetchFriends = async () => {\n  try {\n    const response = await api.get('/auth/friends');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching friends:', error);\n    throw error;\n  }\n};\n\nexport const searchUsers = async (username) => {\n  try {\n    const response = await api.get(`/auth/search?username=${encodeURIComponent(username)}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error searching users:', error);\n    throw error;\n  }\n};\n\nexport const getFriendDetails = async (friendId) => {\n  try {\n    const response = await api.get(`/auth/friends/details/${friendId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching friend details:', error);\n    throw error;\n  }\n};\n\n// Comment-related API calls\nexport const postComment = async (commentData) => {\n  try {\n    const response = await api.post(`/auth/friends/comment`, commentData);\n    return response.data.comments;\n  } catch (error) {\n    console.error('Error posting comment:', error);\n    throw error;\n  }\n};\n\nexport const getDetails = async (userId) => {\n  try {\n    const response = await api.get(`/auth/profile/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user details:', error);\n    throw error;\n  }\n};\n\nexport const deleteComment = async (commentId) => {\n  try {\n    const response = await api.delete(`/auth/friends/delete-comment/${commentId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting comment:', error);\n    throw error;\n  }\n};\n\n// Message-related API calls\nexport const fetchMessages = async (friendId) => {\n  try {\n    const response = await api.get(`/auth/friends/messages/${friendId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching messages:', error);\n    throw error;\n  }\n};\n\nexport const sendMessage = async (messageData) => {\n  try {\n    const response = await api.post(`/auth/friends/messages`, messageData);\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\n\n// Book-related API calls\nexport const createBook = async (bookData) => {\n  try {\n    const response = await api.post(`/books`, bookData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating book:', error);\n    throw error;\n  }\n};\n\nexport const updateBook = async (id, bookData) => {\n  try {\n    const response = await api.put(`/books/${id}`, bookData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating book:', error);\n    throw error;\n  }\n};\n\nexport const getBook = async (id) => {\n  try {\n    const response = await api.get(`/books/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching book:', error);\n    throw error;\n  }\n};\n\nexport const getBookWithStatus = async (id) => {\n  try {\n    const response = await api.get(`/books/${id}/status`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching book with status:', error);\n    throw error;\n  }\n};\n\n// MyBook-related API calls\nexport const getMyBooks = async (userId) => {\n  try {\n    const response = await api.get(`/mybooks?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching my books:', error);\n    throw error;\n  }\n};\n\nexport const deleteBook = async (id) => {\n  try {\n    const response = await api.delete(`/mybooks/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting book:', error);\n    throw error;\n  }\n};\n\nexport const addBookFromSearch = async (bookData) => {\n  try {\n    const response = await api.post(`/mybooks/add-from-search`, bookData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding book from search:', error);\n    throw error;\n  }\n};\n\nexport const rateBook = async (id, ratingData) => {\n  try {\n    const response = await api.post(`/mybooks/${id}/rate`, ratingData);\n    return response.data;\n  } catch (error) {\n    console.error('Error rating book:', error);\n    throw error;\n  }\n};\n\nexport const updateBookProgress = async (progressData) => {\n  try {\n    const response = await api.put(`/mybooks/progress`, progressData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating book progress:', error);\n    throw error;\n  }\n};\n\nexport const updateBookStatus = async (id, statusData) => {\n  try {\n    const response = await api.put(`/mybooks/update-status/${id}`, statusData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating book status:', error);\n    throw error;\n  }\n};\n\nexport const getCurrentlyReadingBooks = async (userId) => {\n  try {\n    console.log(\"userId----------\", userId);\n    \n    const response = await api.get(`/mybooks/dashboard?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching currently reading books:', error);\n    throw error;\n  }\n};\n\nexport const getBookDetails = async (bookId) => {\n  try {\n    const response = await api.get(`/books/${bookId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching book details:', error);\n    throw error;\n  }\n};\n\nexport const addReview = async (bookId, reviewData) => {\n  try {\n    const response = await api.post(`/mybooks/review/${bookId}`, reviewData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding review:', error);\n    throw error;\n  }\n};\n\nexport const editReview = async (bookId, reviewData) => {\n  try {\n    const response = await api.put(`/mybooks/review/${bookId}`, reviewData);\n    return response.data;\n  } catch (error) {\n    console.error('Error editing review:', error);\n    throw error;\n  }\n};\n\nexport const deleteReview = async (reviewId) => {\n  try {\n    const response = await api.delete(`/mybooks/review/${reviewId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting review:', error);\n    throw error;\n  }\n};\n\nexport const searchBooks = async (query) => {\n  try {\n    const response = await api.get(`/search-books?q=${encodeURIComponent(query)}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error searching books:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}