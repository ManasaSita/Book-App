{"ast":null,"code":"var _jsxFileName = \"/home/manasa/Projects/UpGrad/Capestone Project/bookshelf-app/bookShelf/client/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { updateBookProgress, updateBookStatus, getCurrentlyReadingBooks } from '../services/api';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [currentlyReading, setCurrentlyReading] = useState([]);\n  const [pagesRead, setPagesRead] = useState('');\n  const [bookIdToUpdate, setBookIdToUpdate] = useState(null);\n  const [totalPagesToUpdate, setTotalPagesToUpdate] = useState(0);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const {\n    user\n  } = useAuth();\n  const userId = user.payload.user.id;\n  console.log(\"User----\", userId);\n  useEffect(() => {\n    fetchCurrentlyReading();\n  }, []);\n  const fetchCurrentlyReading = async () => {\n    try {\n      const books = await getCurrentlyReadingBooks(userId);\n      console.log(\"Books======\", books);\n      setCurrentlyReading(books);\n    } catch (error) {\n      console.error('Error fetching currently reading books:', error.message);\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault(); // Prevent the form from refreshing the page\n\n    try {\n      console.log(\"updateBookProgress-------\", bookIdToUpdate, totalPagesToUpdate);\n\n      // Calculate progress as a percentage and ensure it's capped at 100\n      const progress = Math.min(Math.round(Number(pagesRead) / totalPagesToUpdate * 100), 100);\n      console.log(\"progress---\", progress);\n\n      // Call API to update progress\n      await updateBookProgress(userId, bookIdToUpdate, progress);\n\n      // Update the local state with the new progress\n      setCurrentlyReading(currentlyReading.map(book => book._id === bookIdToUpdate ? {\n        ...book,\n        progress: progress\n      } : book));\n\n      // Hide the input field after updating\n      setIsUpdating(false);\n      setPagesRead(''); // Clear the input field after submit\n    } catch (error) {\n      console.error('Error updating progress:', error);\n    }\n  };\n  const handleFinishBook = async id => {\n    try {\n      await updateBookStatus(id, 'read');\n      setCurrentlyReading(currentlyReading.filter(book => book._id !== id));\n    } catch (error) {\n      console.error('Error finishing book:', error);\n    }\n  };\n  const handleUpdateClick = (bookId, totalPages) => {\n    setBookIdToUpdate(bookId);\n    setTotalPagesToUpdate(totalPages);\n    setIsUpdating(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), currentlyReading.length > 0 ? currentlyReading.map(book => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Currently Reading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"book-grid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: book._id,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: book.thumbnail,\n            alt: book.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: book.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Author: \", book.author]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Progress: \", book.progress, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this), isUpdating && bookIdToUpdate === book._id ? /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Pages Read:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: pagesRead,\n                onChange: e => setPagesRead(e.target.value),\n                min: \"0\",\n                max: book.pageCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Update Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleUpdateClick(book._id, book.pageCount),\n            children: \"Update Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Progress: \", book.progress, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleFinishBook(book._id),\n            children: \"I've finished\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, book._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No book is marked as Reading. Start reading...!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"MBOB3U+2n8s9F6rteQSIoCWYNo4=\", false, function () {\n  return [useAuth];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","updateBookProgress","updateBookStatus","getCurrentlyReadingBooks","useAuth","jsxDEV","_jsxDEV","Dashboard","_s","currentlyReading","setCurrentlyReading","pagesRead","setPagesRead","bookIdToUpdate","setBookIdToUpdate","totalPagesToUpdate","setTotalPagesToUpdate","isUpdating","setIsUpdating","user","userId","payload","id","console","log","fetchCurrentlyReading","books","error","message","handleSubmit","event","preventDefault","progress","Math","min","round","Number","map","book","_id","handleFinishBook","filter","handleUpdateClick","bookId","totalPages","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","src","thumbnail","alt","title","author","onSubmit","type","value","onChange","e","target","max","pageCount","onClick","_c","$RefreshReg$"],"sources":["/home/manasa/Projects/UpGrad/Capestone Project/bookshelf-app/bookShelf/client/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { updateBookProgress, updateBookStatus, getCurrentlyReadingBooks } from '../services/api';\nimport { useAuth } from '../context/AuthContext';\n\nconst Dashboard = () => {\n  const [currentlyReading, setCurrentlyReading] = useState([]);\n  const [pagesRead, setPagesRead] = useState('');\n  const [bookIdToUpdate, setBookIdToUpdate] = useState(null);\n  const [totalPagesToUpdate, setTotalPagesToUpdate] = useState(0);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const { user } = useAuth();\n  const userId = user.payload.user.id;\n  console.log(\"User----\", userId);\n\n  useEffect(() => {\n    fetchCurrentlyReading();\n  }, []);\n\n  const fetchCurrentlyReading = async () => {\n    try {\n      const books = await getCurrentlyReadingBooks(userId);\n      console.log(\"Books======\", books);\n      setCurrentlyReading(books);\n    } catch (error) {\n      console.error('Error fetching currently reading books:', error.message);\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault(); // Prevent the form from refreshing the page\n    \n    try {\n      console.log(\"updateBookProgress-------\", bookIdToUpdate, totalPagesToUpdate);\n      \n      // Calculate progress as a percentage and ensure it's capped at 100\n      const progress = Math.min(Math.round((Number(pagesRead) / totalPagesToUpdate) * 100), 100);\n      console.log(\"progress---\", progress);\n\n      // Call API to update progress\n      await updateBookProgress(userId, bookIdToUpdate, progress);\n\n      // Update the local state with the new progress\n      setCurrentlyReading(currentlyReading.map(book =>\n        book._id === bookIdToUpdate ? { ...book, progress: progress } : book\n      ));\n\n      // Hide the input field after updating\n      setIsUpdating(false);\n      setPagesRead(''); // Clear the input field after submit\n\n    } catch (error) {\n      console.error('Error updating progress:', error);\n    }\n  };\n\n  const handleFinishBook = async (id) => {\n    try {\n      await updateBookStatus(id, 'read');\n      setCurrentlyReading(currentlyReading.filter(book => book._id !== id));\n    } catch (error) {\n      console.error('Error finishing book:', error);\n    }\n  };\n\n  const handleUpdateClick = (bookId, totalPages) => {\n    setBookIdToUpdate(bookId);\n    setTotalPagesToUpdate(totalPages);\n    setIsUpdating(true);\n  };\n\n  return (\n    <div>\n      <h2>Dashboard</h2>\n      \n      {currentlyReading.length > 0 ? (\n        currentlyReading.map(book => (\n          <div key={book._id}>\n            <h3>Currently Reading</h3>\n            <div className=\"book-grid\">\n              <div id={book._id}>\n                <img src={book.thumbnail} alt={book.title} />\n                <h3>{book.title}</h3>\n                <p>Author: {book.author}</p>\n                <p>Progress: {book.progress}%</p>\n\n                {isUpdating && bookIdToUpdate === book._id ? (\n                  <form onSubmit={handleSubmit}>\n                    <label>\n                      Pages Read:\n                      <input\n                        type=\"number\"\n                        value={pagesRead}\n                        onChange={(e) => setPagesRead(e.target.value)}\n                        min=\"0\"\n                        max={book.pageCount}\n                      />\n                    </label>\n                    <button type=\"submit\">Update Progress</button>\n                  </form>\n                ) : (\n                  <button onClick={() => handleUpdateClick(book._id, book.pageCount)}>\n                    Update Progress\n                  </button>\n                )}\n\n                <div>Progress: {book.progress}%</div>\n                <button onClick={() => handleFinishBook(book._id)}>I've finished</button>\n              </div>\n            </div>\n          </div>\n        ))\n      ) : (\n        <div>\n          <p>No book is marked as Reading. Start reading...!</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}