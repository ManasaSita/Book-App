{"ast":null,"code":"import React,{createContext,useContext,useState,useCallback}from'react';import axios from'axios';// Make sure to install and import axios\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(undefined);const login=useCallback(userData=>{setUser(userData);localStorage.setItem('user',JSON.stringify(userData));},[]);const logout=useCallback(()=>{setUser(null);localStorage.removeItem('user');},[]);const refreshToken=useCallback(async()=>{try{const response=await axios.post('/api/auth/refresh-token',{},{headers:{'x-auth-token':user.token}});const newUserData={...user,token:response.data.token};login(newUserData);return newUserData.token;}catch(error){console.error('Failed to refresh token:',error);logout();return null;}},[user,login,logout]);const handleExpiredToken=useCallback(async()=>{const newToken=await refreshToken();if(newToken){// Retry the original request with the new token\n// You'll need to implement this logic in your API calls\n}else{// Token refresh failed, redirect to login\nlogout();// Redirect to login page\n}},[refreshToken,logout]);const initAuth=useCallback(()=>{const storedUser=localStorage.getItem('user');if(storedUser){setUser(JSON.parse(storedUser));}else{setUser(null);}},[]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,login,logout,initAuth,handleExpiredToken},children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","axios","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","undefined","login","userData","localStorage","setItem","JSON","stringify","logout","removeItem","refreshToken","response","post","headers","token","newUserData","data","error","console","handleExpiredToken","newToken","initAuth","storedUser","getItem","parse","Provider","value","useAuth"],"sources":["/home/manasa/Projects/UpGrad/Project/bookShelf/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\nimport axios from 'axios'; // Make sure to install and import axios\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(undefined);\n\n  const login = useCallback((userData) => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  }, []);\n\n  const logout = useCallback(() => {\n    setUser(null);\n    localStorage.removeItem('user');\n  }, []);\n\n  const refreshToken = useCallback(async () => {\n    try {\n      const response = await axios.post('/api/auth/refresh-token', {}, {\n        headers: {\n          'x-auth-token': user.token\n        }\n      });\n      const newUserData = { ...user, token: response.data.token };\n      login(newUserData);\n      return newUserData.token;\n    } catch (error) {\n      console.error('Failed to refresh token:', error);\n      logout();\n      return null;\n    }\n  }, [user, login, logout]);\n\n  const handleExpiredToken = useCallback(async () => {\n    const newToken = await refreshToken();\n    if (newToken) {\n      // Retry the original request with the new token\n      // You'll need to implement this logic in your API calls\n    } else {\n      // Token refresh failed, redirect to login\n      logout();\n      // Redirect to login page\n    }\n  }, [refreshToken, logout]);\n\n  const initAuth = useCallback(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    } else {\n      setUser(null);\n    }\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, initAuth, handleExpiredToken }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CAC/E,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAE3B,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAQ,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGV,QAAQ,CAACW,SAAS,CAAC,CAE3C,KAAM,CAAAC,KAAK,CAAGX,WAAW,CAAEY,QAAQ,EAAK,CACtCH,OAAO,CAACG,QAAQ,CAAC,CACjBC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC,CACxD,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAK,MAAM,CAAGjB,WAAW,CAAC,IAAM,CAC/BS,OAAO,CAAC,IAAI,CAAC,CACbI,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC,CACjC,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,YAAY,CAAGnB,WAAW,CAAC,SAAY,CAC3C,GAAI,CACF,KAAM,CAAAoB,QAAQ,CAAG,KAAM,CAAAnB,KAAK,CAACoB,IAAI,CAAC,yBAAyB,CAAE,CAAC,CAAC,CAAE,CAC/DC,OAAO,CAAE,CACP,cAAc,CAAEd,IAAI,CAACe,KACvB,CACF,CAAC,CAAC,CACF,KAAM,CAAAC,WAAW,CAAG,CAAE,GAAGhB,IAAI,CAAEe,KAAK,CAAEH,QAAQ,CAACK,IAAI,CAACF,KAAM,CAAC,CAC3DZ,KAAK,CAACa,WAAW,CAAC,CAClB,MAAO,CAAAA,WAAW,CAACD,KAAK,CAC1B,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChDT,MAAM,CAAC,CAAC,CACR,MAAO,KAAI,CACb,CACF,CAAC,CAAE,CAACT,IAAI,CAAEG,KAAK,CAAEM,MAAM,CAAC,CAAC,CAEzB,KAAM,CAAAW,kBAAkB,CAAG5B,WAAW,CAAC,SAAY,CACjD,KAAM,CAAA6B,QAAQ,CAAG,KAAM,CAAAV,YAAY,CAAC,CAAC,CACrC,GAAIU,QAAQ,CAAE,CACZ;AACA;AAAA,CACD,IAAM,CACL;AACAZ,MAAM,CAAC,CAAC,CACR;AACF,CACF,CAAC,CAAE,CAACE,YAAY,CAAEF,MAAM,CAAC,CAAC,CAE1B,KAAM,CAAAa,QAAQ,CAAG9B,WAAW,CAAC,IAAM,CACjC,KAAM,CAAA+B,UAAU,CAAGlB,YAAY,CAACmB,OAAO,CAAC,MAAM,CAAC,CAC/C,GAAID,UAAU,CAAE,CACdtB,OAAO,CAACM,IAAI,CAACkB,KAAK,CAACF,UAAU,CAAC,CAAC,CACjC,CAAC,IAAM,CACLtB,OAAO,CAAC,IAAI,CAAC,CACf,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEN,IAAA,CAACC,WAAW,CAAC8B,QAAQ,EAACC,KAAK,CAAE,CAAE3B,IAAI,CAAEG,KAAK,CAAEM,MAAM,CAAEa,QAAQ,CAAEF,kBAAmB,CAAE,CAAArB,QAAA,CAChFA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAA6B,OAAO,CAAGA,CAAA,GAAMtC,UAAU,CAACM,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}