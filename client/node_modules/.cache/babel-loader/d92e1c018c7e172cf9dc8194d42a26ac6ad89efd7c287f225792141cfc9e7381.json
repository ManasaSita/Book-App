{"ast":null,"code":"import React,{useState,useEffect}from'react';import{updateBookProgress,updateBookStatus,getCurrentlyReadingBooks}from'../services/api';import{useAuth}from'../context/AuthContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=()=>{const[currentlyReading,setCurrentlyReading]=useState([]);const[pagesRead,setPagesRead]=useState('');const[bookIdToUpdate,setBookIdToUpdate]=useState(null);const[totalPagesToUpdate,setTotalPagesToUpdate]=useState(0);const[isUpdating,setIsUpdating]=useState(false);const{user}=useAuth();const userId=user.payload.user.id;console.log(\"User----\",userId);useEffect(()=>{fetchCurrentlyReading();},[]);const fetchCurrentlyReading=async()=>{try{const books=await getCurrentlyReadingBooks(userId);console.log(\"Books======\",books);setCurrentlyReading(books);}catch(error){console.error('Error fetching currently reading books:',error.message);}};const handleSubmit=async event=>{event.preventDefault();// Prevent the form from refreshing the page\ntry{console.log(\"updateBookProgress-------\",bookIdToUpdate,totalPagesToUpdate,pagesRead,userId);// Calculate progress as a percentage and ensure it's capped at 100\nconst progress=Math.min(Math.round(Number(pagesRead)/totalPagesToUpdate*100),100);console.log(\"progress---\",progress);// Call API to update progress\nawait updateBookProgress({userId,bookId:bookIdToUpdate,progress,pagesRead});// Update the local state with the new progress\nsetCurrentlyReading(currentlyReading.map(book=>book._id===bookIdToUpdate?{...book,progress:progress}:book));// Hide the input field after updating\nsetIsUpdating(false);setPagesRead('');// Clear the input field after submit\n}catch(error){console.error('Error updating progress:',error);}};const handleFinishBook=async bookId=>{try{await updateBookStatus(userId,bookId,'read');setCurrentlyReading(currentlyReading.filter(book=>book._id!==bookId));}catch(error){console.error('Error finishing book:',error);}};const handleUpdateClick=(bookId,totalPages)=>{setBookIdToUpdate(bookId);setTotalPagesToUpdate(totalPages);setIsUpdating(true);};return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Currently Reading\"}),/*#__PURE__*/_jsx(\"div\",{className:\"book-grid\",children:currentlyReading.length>0?currentlyReading.map(book=>/*#__PURE__*/_jsxs(\"div\",{className:\"book\",id:book._id,children:[/*#__PURE__*/_jsx(\"img\",{src:book.thumbnail,alt:book.title}),/*#__PURE__*/_jsxs(\"div\",{className:\"details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"title-author\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"title\",children:book.title}),/*#__PURE__*/_jsxs(\"p\",{className:\"author\",children:[\"by \",/*#__PURE__*/_jsx(\"strong\",{children:book.author})]})]}),isUpdating&&bookIdToUpdate===book._id?/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[\"Pages Read:\",/*#__PURE__*/_jsxs(\"div\",{className:\"input-calc\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:book.pagesRead,onChange:e=>setPagesRead(e.target.value),min:\"0\",max:book.pageCount}),/*#__PURE__*/_jsxs(\"p\",{children:[\" / \",book.pageCount]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Update Progress\"})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"progress\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"percent\",children:[\"Progress: \",book.progress,\"%\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleUpdateClick(book._id,book.pageCount),children:\" Update Progress\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleFinishBook(book._id),children:\"I've finished\"})]})]})]})):/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{children:\"No book is marked as Reading. Start reading...!\"})})})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","updateBookProgress","updateBookStatus","getCurrentlyReadingBooks","useAuth","jsx","_jsx","jsxs","_jsxs","Dashboard","currentlyReading","setCurrentlyReading","pagesRead","setPagesRead","bookIdToUpdate","setBookIdToUpdate","totalPagesToUpdate","setTotalPagesToUpdate","isUpdating","setIsUpdating","user","userId","payload","id","console","log","fetchCurrentlyReading","books","error","message","handleSubmit","event","preventDefault","progress","Math","min","round","Number","bookId","map","book","_id","handleFinishBook","filter","handleUpdateClick","totalPages","className","children","length","src","thumbnail","alt","title","author","onSubmit","type","value","onChange","e","target","max","pageCount","onClick"],"sources":["/home/manasa/Projects/UpGrad/Project/bookShelf/client/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { updateBookProgress, updateBookStatus, getCurrentlyReadingBooks } from '../services/api';\nimport { useAuth } from '../context/AuthContext';\n\nconst Dashboard = () => {\n  const [currentlyReading, setCurrentlyReading] = useState([]);\n  const [pagesRead, setPagesRead] = useState('');\n  const [bookIdToUpdate, setBookIdToUpdate] = useState(null);\n  const [totalPagesToUpdate, setTotalPagesToUpdate] = useState(0);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const { user } = useAuth();\n  const userId = user.payload.user.id;\n  console.log(\"User----\", userId);\n\n  useEffect(() => {\n    fetchCurrentlyReading();\n  }, []);\n\n  const fetchCurrentlyReading = async () => {\n    try {\n      const books = await getCurrentlyReadingBooks(userId);\n      console.log(\"Books======\", books);\n      setCurrentlyReading(books);\n    } catch (error) {\n      console.error('Error fetching currently reading books:', error.message);\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault(); // Prevent the form from refreshing the page\n    \n    try {\n      console.log(\"updateBookProgress-------\", bookIdToUpdate, totalPagesToUpdate, pagesRead, userId);\n      \n      // Calculate progress as a percentage and ensure it's capped at 100\n      const progress = Math.min(Math.round((Number(pagesRead) / totalPagesToUpdate) * 100), 100);\n      console.log(\"progress---\", progress);\n\n      // Call API to update progress\n      await updateBookProgress({userId, bookId:bookIdToUpdate, progress, pagesRead});\n\n      // Update the local state with the new progress\n      setCurrentlyReading(currentlyReading.map(book =>\n        book._id === bookIdToUpdate ? { ...book, progress: progress } : book\n      ));\n\n      // Hide the input field after updating\n      setIsUpdating(false);\n      setPagesRead(''); // Clear the input field after submit\n\n    } catch (error) {\n      console.error('Error updating progress:', error);\n    }\n  };\n\n  const handleFinishBook = async (bookId) => {\n    try {\n      await updateBookStatus(userId, bookId, 'read');\n      setCurrentlyReading(currentlyReading.filter(book => book._id !== bookId));\n    } catch (error) {\n      console.error('Error finishing book:', error);\n    }\n  };\n\n  const handleUpdateClick = (bookId, totalPages) => {\n    setBookIdToUpdate(bookId);\n    setTotalPagesToUpdate(totalPages);\n    setIsUpdating(true);\n  };\n\n  return (\n    <div className='dashboard'>\n      <h3>Currently Reading</h3> \n      <div className=\"book-grid\">\n        {currentlyReading.length > 0 ? (\n          currentlyReading.map(book => (\n            \n              <div className='book' id={book._id}>\n                <img src={book.thumbnail} alt={book.title} />\n                <div className='details'>\n                  <div className='title-author'>\n                    <p className='title'>{book.title}</p>\n                    <p className='author'>by <strong>{book.author}</strong></p>\n                  </div>\n                  \n\n                  {isUpdating && bookIdToUpdate === book._id ? (\n                    <form onSubmit={handleSubmit}>\n                      Pages Read:\n                      <div className='input-calc'>\n                        <input type=\"number\" value={book.pagesRead} onChange={(e) => setPagesRead(e.target.value)} min=\"0\" max={book.pageCount}/>\n                        <p> / {book.pageCount}</p>\n                      </div>\n                      \n                      <button type=\"submit\">Update Progress</button>\n                    </form>\n                  ) : (\n                    <div className='progress'>\n                      <div className='percent'>Progress: {book.progress}%</div>\n                      <button onClick={() => handleUpdateClick(book._id, book.pageCount)}> Update Progress</button>\n                      <button onClick={() => handleFinishBook(book._id)}>I've finished</button>\n                    </div>\n                  )}\n                </div>\n\n              </div>\n          ))\n        ) : (\n          <div>\n            <p>No book is marked as Reading. Start reading...!</p>\n          </div>\n        )}\n      </div>\n\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}